//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "mutibooktongyi.h"
#include "Addsyslog.h"
#include "NewBookModify.h"
#include   <math.h>
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "RzBtnEdt"
#pragma link "RzEdit"
#pragma link "RzPanel"
#pragma link "RzButton"
#pragma resource "*.dfm"
Tfrmmutibook *frmmutibook;
//---------------------------------------------------------------------------
__fastcall Tfrmmutibook::Tfrmmutibook(TComponent* Owner,TADOConnection *con)
	: TForm(Owner)
{
	query->Connection = con;
	fcon = con;
	comHebingshumu->Connection = con;
	ybookid = -1;
	mbookid = -1;
	TADOQuery *aq = new TADOQuery(this);
	aq->Connection = con;
	AnsiString sql;
	sql = "select ID,AbbreviatedName from BS_PressInfo";
	aq->Close();
	aq->SQL->Clear();
	aq->SQL->Add(sql);
	aq->Open();
	while (!aq->Eof )
	{
		cbpress->AddItem(aq->FieldByName("AbbreviatedName")->AsAnsiString ,(TObject*)aq->FieldByName("ID")->AsInteger );
		aq->Next();
	}
	delete aq;
}
//---------------------------------------------------------------------------
void __fastcall Tfrmmutibook::edpriceKeyPress(TObject *Sender, wchar_t &Key)
{
	if ((Key < '0' || Key > '9')&&(Key != VK_RETURN)&&(Key !='.')&&(Key != '\b')) {
		Key = NULL;
	}
}
//---------------------------------------------------------------------------
void __fastcall Tfrmmutibook::BtnViewClick(TObject *Sender)
{
	AnsiString sql,sqlauto,sqlhaving,sqlon,sqlorder,sqlselect;
	bool tiaojian = false;
	if (chautoisbn->Checked ) {
		sqlhaving = "count(isbn) > 1 ";
		sqlon = " BS_BookCatalog.isbn = A.isbn";
		sqlorder = "BS_BookCatalog.isbn";
		sqlselect = " isbn";
		tiaojian = true;
	}
	if (chautoname->Checked ) {
		if (sqlon == "") {
			sqlon = " BS_BookCatalog.name = A.name";
			sqlhaving = sqlhaving + " count(name) > 1";
			sqlorder = "BS_BookCatalog.name";
			sqlselect = " name";
		}
		else
		{
			sqlon = sqlon + " and BS_BookCatalog.name = A.name";
			sqlhaving = sqlhaving + " and count(name) > 1";
			sqlorder = sqlorder + ",BS_BookCatalog.name";
			sqlselect = sqlselect + ",name";
		}
		tiaojian = true;
	}
	if (chautoprice->Checked ) {
		if (sqlon == "") {
			sqlon = " BS_BookCatalog.price = A.price";
			sqlhaving = sqlhaving + "count(price) > 1";
			sqlorder = "BS_BookCatalog.price";
			sqlselect = " price";
		}
		else
		{
			sqlon = sqlon + " and BS_BookCatalog.price = A.price";
			sqlhaving = sqlhaving + " and count(price) > 1";
			sqlorder = sqlorder + ",BS_BookCatalog.price";
			sqlselect = sqlselect + ",price";
		}
		tiaojian = true;
	}
	if (chautoauthor->Checked ) {
		if (sqlon == "") {
			sqlon = " BS_BookCatalog.author = A.author";
			sqlhaving = sqlhaving + "count(author) > 1";
			sqlorder = "BS_BookCatalog.author";
			sqlselect = "author";
		}
		else
		{
			sqlon = sqlon + " and BS_BookCatalog.author = A.author";
			sqlhaving = sqlhaving + " and count(author) > 1";
			sqlorder = sqlorder + ",BS_BookCatalog.author";
			sqlselect = sqlselect + ",author";
		}
		tiaojian = true;
	}
	if (chautousercode->Checked ) {
		if (sqlon == "") {
			sqlon = " BS_BookCatalog.UserDefCode = A.UserDefCode";
			sqlhaving = sqlhaving + "count(UserDefCode) > 1";
			sqlorder = "BS_BookCatalog.UserDefCode";
			sqlselect = "UserDefCode";
		}
		else
		{
			sqlon = sqlon + " and BS_BookCatalog.UserDefCode = A.UserDefCode";
			sqlhaving = sqlhaving + " and count(UserDefCode) > 1";
			sqlorder = sqlorder + ",BS_BookCatalog.UserDefCode";
			sqlselect = sqlselect + ",UserDefCode";
		}
		tiaojian = true;
	}
	if (chautopress->Checked ) {
		if (sqlon == "") {
			sqlon = " BS_BookCatalog.PressID = A.PressID";
			sqlhaving = sqlhaving + "count(PressID) > 1";
			sqlorder = "BS_BookCatalog.PressID";
			sqlselect = "PressID";
		}
		else
		{
			sqlon = sqlon + " and BS_BookCatalog.PressID = A.PressID";
			sqlhaving = sqlhaving + " and count(PressID) > 1";
			sqlorder = sqlorder + ",BS_BookCatalog.PressID";
			sqlselect = sqlselect + ",PressID";
		}
		tiaojian = true;
	}
	if (chautopresscount->Checked ) {
		if (sqlon == "") {
			sqlon = " BS_BookCatalog.PressCount = A.PressCount";
			sqlhaving = sqlhaving + "count(PressCount) > 1";
			sqlorder = "BS_BookCatalog.PressCount";
			sqlselect = "PressCount";
		}
		else
		{
			sqlon = sqlon + " and BS_BookCatalog.PressCount = A.PressCount";
			sqlhaving = sqlhaving + " and count(PressCount) > 1";
			sqlorder = sqlorder + ",BS_BookCatalog.PressCount";
			sqlselect = sqlselect + ",PressCount";
		}
		tiaojian = true;
	}
	if (sqlorder == "") {
		sqlorder = "BS_BookCatalog.id";
	}
	if (sqlon == "") {
		sql = "select distinct DENSE_RANK() over (order by " + sqlorder + ") as xuhao,BS_BookCatalog.*,BS_PressInfo.AbbreviatedName from BS_BookCatalog left join BS_PressInfo on BS_BookCatalog.pressid = BS_PressInfo.id where BS_BookCatalog.type = 0 ";
	}
	else
	{
		sql = "select distinct DENSE_RANK() over (order by " + sqlorder + ") as xuhao,BS_BookCatalog.*,BS_PressInfo.AbbreviatedName from BS_BookCatalog left join BS_PressInfo on BS_BookCatalog.pressid = BS_PressInfo.id join (select " + sqlselect + " from BS_BookCatalog group by " + sqlselect + " having " + sqlhaving + ") A ON " + sqlon + " where BS_BookCatalog.type = 0 ";
	}
	if (chisbn->Checked && edisbn->Text != "") {
		tiaojian = true;
		sql = sql + " and (BS_BookCatalog.ISBN like '%" + edisbn->Text.Trim() + "%' or BS_BookCatalog.Barcode like '%" + edisbn->Text.Trim() + "%') ";
	}
	if (chname->Checked && edname->Text != "") {
		tiaojian = true;
		sql = sql + " and BS_BookCatalog.Name like '%" + edname->Text.Trim() + "%' ";
	}
	if (chauthor->Checked && edauthor->Text != "") {
		tiaojian = true;
		sql = sql + " and BS_BookCatalog.author like '%" + edauthor->Text.Trim() + "%' ";
	}
	if (chprice->Checked && edprice->Text != "") {
		try {
			StrToFloat(edprice->Text);
		} catch (...) {
			MessageBox(0,"请输入正确的定价！","错误确认" ,MB_OK);
			return;
		}
		sql = sql + " and BS_BookCatalog.price = " +  edprice->Text;
		tiaojian = true;
	}
	if (chuserdef->Checked && eduserdef->Text != "") {
		tiaojian = true;
		sql = sql + " and BS_BookCatalog.UserDefCode like '%" + eduserdef->Text.Trim() + "%' ";
	}
	if (chpress->Checked && cbpress->Text != "") {
		tiaojian = true;
		sql = sql + " and BS_PressInfo.AbbreviatedName = '" + cbpress->Text + "'";
	}
	sql = sql + " order by " + sqlorder;
	if (!tiaojian) {
		MessageBox(0,"请录入查询条件！","提示" ,MB_OK);
		return;
	}
	query->Close();
	query->SQL->Clear();
	query->SQL->Add(sql);
	query->Open();

}
//---------------------------------------------------------------------------

void __fastcall Tfrmmutibook::BtnAlignBottomClick(TObject *Sender)
{
	WindowState = wsMinimized ;
}
//---------------------------------------------------------------------------

void __fastcall Tfrmmutibook::BtnExitClick(TObject *Sender)
{
	Close();
}
//---------------------------------------------------------------------------

void __fastcall Tfrmmutibook::FormClose(TObject *Sender, TCloseAction &Action)
{
	if (!query->IsEmpty() ) {
    	TADOQuery *aq = new TADOQuery(this);
		aq->Connection = fcon;
		AnsiString sql = " update bs_bookcatalog set tag = 0 where tag = 1";
		aq->Close();
		aq->SQL->Clear();
		aq->SQL->Add(sql);
		aq->ExecSQL();
		delete aq;
	}
	Action = caFree ;
}
//---------------------------------------------------------------------------

void __fastcall Tfrmmutibook::BtnSelectAllClick(TObject *Sender)
{

	TLocateOptions   Opts;
	Opts.Clear();
	Opts   <<   loPartialKey;
	String   str   = 1;

	if (!query->Locate("tag",str,Opts)) {
    	MessageBoxA(0,"没有设置合并源书目！","提示",MB_ICONEXCLAMATION);
		return;
	}
	if (mbookid == -1) {
		MessageBoxA(0,"没有设置合并目标书目！","提示",MB_ICONEXCLAMATION);
		return;
	}

	if (MessageBoxA(0,"确认合并书目？","提示",MB_ICONQUESTION||MB_OKCANCEL)!= 1) {
    	return;
	}

	while (query->Locate("tag",str,Opts))
	{

		if (query->FieldByName("xuhao")->AsInteger != mxuhao ) {
			AnsiString mess = "确认合并书目" + query->FieldByName("name")->AsString + "到"  + mbookname;
			if (MessageBoxA(0,mess.c_str() ,"提示",MB_ICONQUESTION||MB_OKCANCEL) != 1) {
            	query->Edit();
				query->FieldByName("tag")->AsInteger = 0;
				query->UpdateBatch(arCurrent);
				break;
			}
		}
		if (fabs(query->FieldByName("Price")->AsFloat - mprice) > 0.01) {
            MessageBox(0,"合并书目定价不一致，为了保证财务信息正确，此书不能进行合并！","提示" ,MB_OK);
			break;
		}
		try {
			comHebingshumu->Parameters->ParamByName("@ybookid")->Value = query->FieldByName("id")->AsInteger ;
			comHebingshumu->Parameters->ParamByName("@mbookid")->Value = mbookid;
			comHebingshumu->Execute();
			logmessage =  "合并书目《" + query->FieldByName("name")->AsString + "》为《" + mbookname + "》";
			AddEvent(1,"重书合并",userid,stgid,logmessage,fcon);
		} catch (...) {
		}
		query->Active = false;
		query->Active = true;
	}
}
//---------------------------------------------------------------------------

void __fastcall Tfrmmutibook::BtnCopyAllClick(TObject *Sender)
{
	if (query->IsEmpty() ) {
		return;
	}
	ybookname = query->FieldByName("name")->AsAnsiString ;
	ybookid = query->FieldByName("id")->AsInteger ;
	query->Edit();
	query->FieldByName("tag")->AsInteger = 1;
	query->UpdateBatch(arCurrent);
	try {
    	//query->Refresh();
    } catch (...) {
	}
}
//---------------------------------------------------------------------------

void __fastcall Tfrmmutibook::BtnMoveClick(TObject *Sender)
{
	if (query->IsEmpty() ) {
		return;
	}
	mprice = 0.00;
	mbookname = query->FieldByName("name")->AsAnsiString ;
	mbookid = query->FieldByName("id")->AsInteger ;
	mxuhao = query->FieldByName("xuhao")->AsInteger ;
	mprice = query->FieldByName("Price")->AsFloat ;
	query->Edit();
	query->FieldByName("tag")->AsInteger = 2;
	query->UpdateBatch(arCurrent);
	try {
		//query->Refresh();
    } catch (...) {
	}
}
//---------------------------------------------------------------------------

void __fastcall Tfrmmutibook::ednameChange(TObject *Sender)
{
	if (edname->Text != "") {
		chname->Checked = true;
	}
	else
	{
    	chname->Checked = false;
	}
}
//---------------------------------------------------------------------------

void __fastcall Tfrmmutibook::edisbnChange(TObject *Sender)
{
	if (edisbn->Text != "") {
		chisbn->Checked = true;
	}
	else
	{
    	chisbn->Checked = false;
	}
}
//---------------------------------------------------------------------------

void __fastcall Tfrmmutibook::edauthorChange(TObject *Sender)
{
	if (edauthor->Text != "") {
		chauthor->Checked = true;
	}
	else
	{
		chauthor->Checked = false;
	}
}
//---------------------------------------------------------------------------

void __fastcall Tfrmmutibook::edpriceChange(TObject *Sender)
{
	if (edprice->Text != "") {
		chprice->Checked = true;
	}
	else
	{
    	chprice->Checked = false;
	}
}
//---------------------------------------------------------------------------

void __fastcall Tfrmmutibook::eduserdefChange(TObject *Sender)
{
	if (eduserdef->Text != "") {
		chuserdef->Checked = true;
	}
	else
	{
    	chuserdef->Checked = false;
	}
}
//---------------------------------------------------------------------------

void __fastcall Tfrmmutibook::cbpressChange(TObject *Sender)
{
	if (cbpress->Text != "") {
		chpress->Checked = true;
	}
	else
	{
		chpress->Checked = false;
	}
}
//---------------------------------------------------------------------------

void __fastcall Tfrmmutibook::edpressKeyPress(TObject *Sender, wchar_t &Key)
{
	if (Key == '\r') {
		if (edpress->Text == "") {
            return;
		}
        TADOQuery *aq = new TADOQuery(this);
		aq->Connection = fcon;
		AnsiString sql;
		sql = "select ID,AbbreviatedName from BS_PressInfo where AbbreviatedName like '%" + edpress->Text.Trim() + "%'";
		aq->Close();
		aq->SQL->Clear();
		aq->SQL->Add(sql);
		aq->Open();
		cbpress->Items->Clear();
		while (!aq->Eof )
		{
			cbpress->AddItem(aq->FieldByName("AbbreviatedName")->AsAnsiString ,(TObject*)aq->FieldByName("ID")->AsInteger );
			aq->Next();
		}
		aq->First();
		cbpress->ItemIndex = cbpress->Items->IndexOfObject((TObject*)aq->FieldByName("ID")->AsInteger);
		delete aq;
	}
}
//---------------------------------------------------------------------------

void __fastcall Tfrmmutibook::DBGrid1DrawColumnCell(TObject *Sender, const TRect &Rect,
          int DataCol, TColumn *Column, TGridDrawState State)
{
	if (DBGrid1->DataSource->DataSet->FieldByName("tag")->AsInteger == 1 ) {
		DBGrid1->Canvas->FillRect(Rect);
		DBGrid1->Canvas->Font->Color  = clBlue;
		DBGrid1->DefaultDrawColumnCell(Rect,DataCol,Column,State);
	}
	if (DBGrid1->DataSource->DataSet->FieldByName("id")->AsInteger == mbookid ) {
		DBGrid1->Canvas->FillRect(Rect);
		DBGrid1->Canvas->Font->Color  = clRed;
		DBGrid1->DefaultDrawColumnCell(Rect,DataCol,Column,State);
	}
}
//---------------------------------------------------------------------------

void __fastcall Tfrmmutibook::FormKeyDown(TObject *Sender, WORD &Key, TShiftState Shift)

{
	if (Shift.Contains(ssAlt)&& Key == 70 ) {    //查询
		BtnView->Click();
	}
	if (Key == VK_F2) {
		BtnCopyAll->Click();
	}
	if (Key == VK_F3) {
		BtnMove->Click();
	}
	if (Key == VK_F4) {
		BtnSelectAll->Click();
	}
	if (Shift.Contains(ssAlt)&& Key ==81  ) {
		BtnExit->Click();
	}
	if (Shift.Contains(ssAlt)&& Key == 78 ) {
		BtnAlignBottom->Click();
	}
}
//---------------------------------------------------------------------------

void __fastcall Tfrmmutibook::DBGrid1DblClick(TObject *Sender)
{
	if (query->IsEmpty() ) {
		return;
	}
	TLocateOptions   Opts;
	Opts.Clear();
	Opts   <<   loPartialKey;
	String   str   = query->FieldByName("id")->AsString ;

	TfrmNewBookModify * frm = new TfrmNewBookModify(Application,fcon,query->FieldByName("id")->AsInteger ,stgid,userid);
	frm->ShowModal();
	delete frm;


	try {
        query->Refresh();
    } catch (...) {
	}
	//query->Active = false;
	//query->Active = true;

	//query->Locate("id",str,Opts);
}
//---------------------------------------------------------------------------

void __fastcall Tfrmmutibook::N1Click(TObject *Sender)
{
	if (query->IsEmpty() ) {
        return;
	}
	query->Edit();
	query->FieldByName("tag")->AsInteger = 0;
	query->UpdateBatch(arCurrent);
}
//---------------------------------------------------------------------------

