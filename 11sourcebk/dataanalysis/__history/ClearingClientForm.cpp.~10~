//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "ClearingClientForm.h"
#include "..\bsadmin\UnitSelectClient.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "MDIChild"
#pragma link "RzButton"
#pragma link "RzGrids"
#pragma link "RzLabel"
#pragma link "RzPanel"
#pragma link "DBGridEh"
#pragma link "GridsEh"
#pragma resource "*.dfm"
TfrmClearingClient *frmClearingClient;
//---------------------------------------------------------------------------
__fastcall TfrmClearingClient::TfrmClearingClient(TComponent* Owner)
	: TfrmMDIChild(Owner)
{        m_module = MTData;
	dtp1->Date=dtp1->Date .CurrentDate();
	dtp2->Date=dtp2->Date .CurrentDate();
	ClientID = -1;
    WindowState = wsMaximized ;
}
//---------------------------------------------------------------------------

void TfrmClearingClient::Init(TApplication* app, TADOConnection* con)
{
		TfrmMDIChild::Init(app, con);

		fcon = con;
		query->Connection = con;
		TADOQuery * aq;
		aq = new TADOQuery(this);
		aq->Connection = con;
		aq->Close();
		aq->SQL->Clear();
		aq->SQL->Add("select * from sys_bsset where name ='salexiaoshudian'");
		aq->Open();
		format =  "￥" + aq->FieldByName("bk")->AsAnsiString ;
		String sql ;

		sql = "select ID,Name from SYS_StorageInfo ";
		aq->Close();
		aq->SQL->Clear();
		aq->SQL->Add(sql);
		aq->Open();
		while (!aq->Eof )
		{
			cbstorage->AddItem(aq->FieldByName("Name")->AsString ,(TObject*)aq->FieldByName("ID")->AsInteger );
			aq->Next();
		}
		cbstorage->ItemIndex = cbstorage->Items->IndexOfObject((TObject*)stgid);
		sql = "select Master from SYS_StorageInfo where id = " + IntToStr(stgid);
        aq->Close();
		aq->SQL->Clear();
		aq->SQL->Add(sql);
		aq->Open();
		if (aq->FieldByName("Master")->AsBoolean ) {
			chstorage->Enabled = true;
			cbstorage->Enabled = true;
		}
		else
		{
			chstorage->Enabled = false;
			cbstorage->Enabled = false;
		}

        sql = "select ID,PresentNum,AbbreviatedName from BS_PressInfo";
	aq->Close();
	aq->SQL->Clear();
	aq->SQL->Add(sql);
	aq->Open();
	while (!aq->Eof )
	{
		cpress->AddItem(aq->FieldByName("AbbreviatedName")->AsString ,(TObject*)aq->FieldByName("ID")->AsInteger );
		aq->Next();
	}
	sql = "select ID,Name from BS_BookType";
	aq->Close();
	aq->SQL->Clear();
	aq->SQL->Add(sql);
	aq->Open();
	while (!aq->Eof )
	{
		cbtype->AddItem(aq->FieldByName("Name")->AsString ,(TObject*)aq->FieldByName("ID")->AsInteger );
		aq->Next();
	}

		delete aq;


		dg->Columns->Items[3]->DisplayFormat =  format;
		dg->Columns->Items[4]->DisplayFormat =  format;
		dg->Columns->Items[6]->DisplayFormat =  format;
		dg->Columns->Items[7]->DisplayFormat =  format;
		dg->Columns->Items[9]->DisplayFormat =  format;
		dg->Columns->Items[10]->DisplayFormat =  format;
		dg->Columns->Items[11]->DisplayFormat =  format;
		dg->Columns->Items[12]->DisplayFormat =  format;
		dg->Columns->Items[3]->Footer->DisplayFormat =  format;
		dg->Columns->Items[4]->Footer->DisplayFormat =  format;
		dg->Columns->Items[6]->Footer->DisplayFormat =  format;
		dg->Columns->Items[7]->Footer->DisplayFormat =  format;
		dg->Columns->Items[9]->Footer->DisplayFormat =  format;
		dg->Columns->Items[10]->Footer->DisplayFormat =  format;
		dg->Columns->Items[11]->Footer->DisplayFormat =  format;
		dg->Columns->Items[12]->Footer->DisplayFormat =  format;
}


void __fastcall TfrmClearingClient::RzToolButton1Click(TObject *Sender)
{
	if (ClientID == -1) {
    	MessageBox(0,"请选择客户!","提示",MB_ICONEXCLAMATION);
		return;
	}
	Query();
}
//---------------------------------------------------------------------------


void __fastcall TfrmClearingClient::FormClose(TObject *Sender, TCloseAction &Action)

{
	Action = caFree;
}
//---------------------------------------------------------------------------

void __fastcall TfrmClearingClient::RzToolButton3Click(TObject *Sender)
{
	Close();
}
//---------------------------------------------------------------------------

void __fastcall TfrmClearingClient::FormKeyDown(TObject *Sender, WORD &Key, TShiftState Shift)

{
	if (Shift.Contains(ssCtrl)&& Key == 70 ) {    //查询
		RzToolButton1->Click();
	}
	if (Shift.Contains(ssCtrl)&& Key == 78 ) {    //最小化
		BtnAlignBottom->Click();
	}
	if (Shift.Contains(ssCtrl)&& Key == 81 ) {    //退出
		RzToolButton3->Click();
	}
	if (Shift.Contains(ssCtrl)&& Key ==90) {   //恢复窗口
		WindowState = wsNormal  ;
	}
}
//---------------------------------------------------------------------------

void __fastcall TfrmClearingClient::BtnAlignBottomClick(TObject *Sender)
{
	WindowState = wsMinimized ;
}
//---------------------------------------------------------------------------

void TfrmClearingClient::Query()
{
	AnsiString sql,sqlwhere;
	if (ClientID == -1) {
    	return;
	}
	if (chisbn->Checked && edisbn->Text != "") {
		sqlwhere = sqlwhere + " and (bs_bookcatalog.ISBN like '%" + edisbn->Text.Trim() + "%' or bs_bookcatalog.Barcode like '%" + edisbn->Text.Trim() + "%')";
	}
	if (chname->Checked && edname->Text != "") {
		sqlwhere = sqlwhere + " and bs_bookcatalog.name like '%" + edname->Text.Trim() + "%'";
	}
	if (chtype->Checked && cbtype->Text != "") {
		sqlwhere = sqlwhere + " and bs_booktype.name = '" + cbtype->Text.Trim() + "'";
	}
	if (chpress->Checked && cpress->Text != "") {
		sqlwhere = sqlwhere + " and bs_pressinfo.AbbreviatedName = '" + cpress->Text.Trim() + "'";
	}
	//if (edtclient->Text != "" ) {
	//	sqlwhere = sqlwhere + " and bs_wsalenoteheader.vendorid = " + IntToStr(ClientID);
   //	}
	if (cbstart->Checked ) {
		sqlwhere = sqlwhere + " and datediff(day,'" + DateToStr(dtp1->Date) + "',bs_wsalenoteheader.HdTime) >= 0";
	}
	if (cbend->Checked ) {
		sqlwhere = sqlwhere + " and datediff(day,'" + DateToStr(dtp2->Date) + "',bs_wsalenoteheader.HdTime) <= 0";
	}
	if (chstorage->Checked) {
    	int fstgid;
		try {
			fstgid = (int)cbstorage->Items->Objects[cbstorage->ItemIndex];
			sqlwhere = sqlwhere + " and bs_wsalenoteheader.stgid = " + IntToStr(fstgid);
		} catch (...) {
			MessageBox(0,"请选择正确的店号!","提示",MB_ICONEXCLAMATION);
			return;
		}
	}
	switch (rg->ItemIndex ) {
		case 0:     //单书
			sql = "select dbo.uf_bs_getclientname(D.vendorid) as clientname,A.id,A.Name,sum(B.Amount) as amount1,sum(B.FixedPrice) as FixedPrice1,sum(B.DiscountedPrice) as DiscountedPrice1,sum(C.Amount) as amount2,sum(C.FixedPrice) as FixedPrice2,sum(C.DiscountedPrice) as DiscountedPrice2,sum(D.Amount) as amount3,sum(D.FixedPrice) as FixedPrice3,sum(D.DiscountedPrice) as DiscountedPrice3,sum(D.Cbprice) as Cbprice,sum(D.profite) as profite "
			" from "
			" (select bs_wsalenote.*,bs_wsalenoteheader.vendorid,bs_booktype.id as typeid,bs_pressinfo.id  as pressid,bs_bookcatalog.id as bkcatalogid,(stk_bookinfo.Cbprice)*(bs_wsalenote.amount) as Cbprice,bs_wsalenote.DiscountedPrice-(stk_bookinfo.Cbprice)*(bs_wsalenote.amount) as profite "
			" from bs_wsalenote "
			" join bs_wsalenoteheader on bs_wsalenoteheader.id = bs_wsalenote.WsaleNtHeaderID "
			" left join stk_bookinfo on bs_wsalenote.bkinfoid = stk_bookinfo.id "
			" left join bs_bookcatalog on stk_bookinfo.bkcatalogid = bs_bookcatalog.id "
			" left join bs_booktype on bs_bookcatalog.smallBookTypeID = bs_booktype.id "
			" left join bs_pressinfo on bs_bookcatalog.pressid = bs_pressinfo.id where bs_wsalenoteheader.vendorid in (select id from dbo.getchild(" + IntToStr(ClientID) + "))" + sqlwhere +
			" ) D LEFT JOIN bs_bookcatalog A ON A.id = D.bkcatalogid left join "
			" (select bs_wsalenote.*,bs_wsalenoteheader.vendorid,bs_booktype.id as typeid,bs_pressinfo.id  as pressid,bs_bookcatalog.id as bkcatalogid,(stk_bookinfo.Cbprice)*(bs_wsalenote.amount) as Cbprice,bs_wsalenote.DiscountedPrice-(stk_bookinfo.Cbprice)*(bs_wsalenote.amount) as profite "
			" from bs_wsalenote "
			" left join bs_wsalenoteheader on bs_wsalenoteheader.id = bs_wsalenote.WsaleNtHeaderID "
			" left join stk_bookinfo on bs_wsalenote.bkinfoid = stk_bookinfo.id "
			" left join bs_bookcatalog on stk_bookinfo.bkcatalogid = bs_bookcatalog.id "
			" left join bs_booktype on bs_bookcatalog.smallBookTypeID = bs_booktype.id "
			" left join bs_pressinfo on bs_bookcatalog.pressid = bs_pressinfo.id where bs_wsalenote.amount < 0 and  bs_wsalenoteheader.vendorid in (select id from dbo.getchild(" + IntToStr(ClientID) + "))" + sqlwhere +
			" ) C ON D.id = C.id left JOIN "
			" (select bs_wsalenote.*,bs_wsalenoteheader.vendorid,bs_booktype.id as typeid,bs_pressinfo.id as pressid,bs_bookcatalog.id as bkcatalogid,(stk_bookinfo.Cbprice)*(bs_wsalenote.amount) as Cbprice,bs_wsalenote.DiscountedPrice-(stk_bookinfo.Cbprice)*(bs_wsalenote.amount) as profite "
			" from bs_wsalenote "
			" left join bs_wsalenoteheader on bs_wsalenoteheader.id = bs_wsalenote.WsaleNtHeaderID "
			" left join stk_bookinfo on bs_wsalenote.bkinfoid = stk_bookinfo.id "
			" left join bs_bookcatalog on stk_bookinfo.bkcatalogid = bs_bookcatalog.id "
			" left join bs_booktype on bs_bookcatalog.smallBookTypeID = bs_booktype.id "
			" left join bs_pressinfo on bs_bookcatalog.pressid = bs_pressinfo.id where bs_wsalenote.amount > 0 and bs_wsalenoteheader.vendorid in (select id from dbo.getchild(" + IntToStr(ClientID) + "))" + sqlwhere +
			" ) B ON B.id = D.id "
			" group by A.id,A.name,D.vendorid having (sum(B.Amount) is not null or sum(C.Amount) IS NOT NULL or sum(D.Amount) IS NOT NULL )";
			dg->Columns->Items[1]->Title->Caption = "书名";
		break;
		case 1:     //出版社
			sql = "select dbo.uf_bs_getclientname(D.vendorid) as clientname,A.id,A.AbbreviatedName as Name,sum(B.Amount) as amount1,sum(B.FixedPrice) as FixedPrice1,sum(B.DiscountedPrice) as DiscountedPrice1,sum(C.Amount) as amount2,sum(C.FixedPrice) as FixedPrice2,sum(C.DiscountedPrice) as DiscountedPrice2,sum(D.Amount) as amount3,sum(D.FixedPrice) as FixedPrice3,sum(D.DiscountedPrice) as DiscountedPrice3,sum(D.Cbprice) as Cbprice,sum(D.profite) as profite "
			" from  "
			" (select bs_wsalenote.*,bs_wsalenoteheader.vendorid,bs_booktype.id as typeid,bs_pressinfo.id  as pressid,bs_bookcatalog.id as bkcatalogid,(stk_bookinfo.Cbprice)*(bs_wsalenote.amount) as Cbprice,bs_wsalenote.DiscountedPrice-(stk_bookinfo.Cbprice)*(bs_wsalenote.amount) as profite "
			" from bs_wsalenote "
			" join bs_wsalenoteheader on bs_wsalenoteheader.id = bs_wsalenote.WsaleNtHeaderID "
			" left join stk_bookinfo on bs_wsalenote.bkinfoid = stk_bookinfo.id "
			" left join bs_bookcatalog on stk_bookinfo.bkcatalogid = bs_bookcatalog.id "
			" left join bs_booktype on bs_bookcatalog.smallBookTypeID = bs_booktype.id "
			" left join bs_pressinfo on bs_bookcatalog.pressid = bs_pressinfo.id where bs_wsalenoteheader.vendorid in (select id from dbo.getchild(" + IntToStr(ClientID) + "))" + sqlwhere +
			" ) D left join  BS_PressInfo A on A.id = D.pressid left JOIN "
			" (select bs_wsalenote.*,bs_wsalenoteheader.vendorid,bs_booktype.id as typeid,bs_pressinfo.id  as pressid,bs_bookcatalog.id as bkcatalogid,(stk_bookinfo.Cbprice)*(bs_wsalenote.amount) as Cbprice,bs_wsalenote.DiscountedPrice-(stk_bookinfo.Cbprice)*(bs_wsalenote.amount) as profite "
			" from bs_wsalenote "
			" left join bs_wsalenoteheader on bs_wsalenoteheader.id = bs_wsalenote.WsaleNtHeaderID "
			" left join stk_bookinfo on bs_wsalenote.bkinfoid = stk_bookinfo.id "
			" left join bs_bookcatalog on stk_bookinfo.bkcatalogid = bs_bookcatalog.id "
			" left join bs_booktype on bs_bookcatalog.smallBookTypeID = bs_booktype.id "
			" left join bs_pressinfo on bs_bookcatalog.pressid = bs_pressinfo.id where bs_wsalenote.amount < 0 and  bs_wsalenoteheader.vendorid in (select id from dbo.getchild(" + IntToStr(ClientID) + "))" + sqlwhere +
			" ) C ON (D.pressid = C.pressid AND D.ID = C.ID) LEFT JOIN "
			" (select bs_wsalenote.*,bs_wsalenoteheader.vendorid,bs_booktype.id as typeid,bs_pressinfo.id as pressid,bs_bookcatalog.id as bkcatalogid,(stk_bookinfo.Cbprice)*(bs_wsalenote.amount) as Cbprice,bs_wsalenote.DiscountedPrice-(stk_bookinfo.Cbprice)*(bs_wsalenote.amount) as profite "
			" from bs_wsalenote "
			" left join bs_wsalenoteheader on bs_wsalenoteheader.id = bs_wsalenote.WsaleNtHeaderID "
			" left join stk_bookinfo on bs_wsalenote.bkinfoid = stk_bookinfo.id "
			" left join bs_bookcatalog on stk_bookinfo.bkcatalogid = bs_bookcatalog.id "
			" left join bs_booktype on bs_bookcatalog.smallBookTypeID = bs_booktype.id "
			" left join bs_pressinfo on bs_bookcatalog.pressid = bs_pressinfo.id where bs_wsalenote.amount > 0 and bs_wsalenoteheader.vendorid in (select id from dbo.getchild(" + IntToStr(ClientID) + "))" + sqlwhere +
			" ) B ON (B.pressid = D.pressid AND D.ID = B.ID)"
			" group by A.id,A.AbbreviatedName,D.vendorid having (sum(B.Amount) is not null or sum(C.Amount) IS NOT NULL or sum(D.Amount) IS NOT NULL )";
			dg->Columns->Items[1]->Title->Caption = "出版社";
		break;
		case 2:     //类别
			sql = "select dbo.uf_bs_getclientname(D.vendorid) as clientname,A.id,A.Name,sum(B.Amount) as amount1,sum(B.FixedPrice) as FixedPrice1,sum(B.DiscountedPrice) as DiscountedPrice1,sum(C.Amount) as amount2,sum(C.FixedPrice) as FixedPrice2,sum(C.DiscountedPrice) as DiscountedPrice2,sum(D.Amount) as amount3,sum(D.FixedPrice) as FixedPrice3,sum(D.DiscountedPrice) as DiscountedPrice3,sum(D.Cbprice) as Cbprice,sum(D.profite) as profite "
			" from "
			" (select bs_wsalenote.*,bs_wsalenoteheader.vendorid,bs_booktype.id as typeid,bs_pressinfo.id  as pressid,bs_bookcatalog.id as bkcatalogid,(stk_bookinfo.Cbprice)*(bs_wsalenote.amount) as Cbprice,bs_wsalenote.DiscountedPrice-(stk_bookinfo.Cbprice)*(bs_wsalenote.amount) as profite "
			" from bs_wsalenote "
			" join bs_wsalenoteheader on bs_wsalenoteheader.id = bs_wsalenote.WsaleNtHeaderID "
			" left join stk_bookinfo on bs_wsalenote.bkinfoid = stk_bookinfo.id "
			" left join bs_bookcatalog on stk_bookinfo.bkcatalogid = bs_bookcatalog.id "
			" left join bs_booktype on bs_bookcatalog.smallBookTypeID = bs_booktype.id "
			" left join bs_pressinfo on bs_bookcatalog.pressid = bs_pressinfo.id where bs_wsalenoteheader.vendorid in (select id from dbo.getchild(" + IntToStr(ClientID) + "))" + sqlwhere +
			" ) D left join BS_BookType A ON A.id = D.typeid left JOIN"
			" (select bs_wsalenote.*,bs_wsalenoteheader.vendorid,bs_booktype.id as typeid,bs_pressinfo.id  as pressid,bs_bookcatalog.id as bkcatalogid,(stk_bookinfo.Cbprice)*(bs_wsalenote.amount) as Cbprice,bs_wsalenote.DiscountedPrice-(stk_bookinfo.Cbprice)*(bs_wsalenote.amount) as profite "
			" from bs_wsalenote "
			" left join bs_wsalenoteheader on bs_wsalenoteheader.id = bs_wsalenote.WsaleNtHeaderID "
			" left join stk_bookinfo on bs_wsalenote.bkinfoid = stk_bookinfo.id "
			" left join bs_bookcatalog on stk_bookinfo.bkcatalogid = bs_bookcatalog.id "
			" left join bs_booktype on bs_bookcatalog.smallBookTypeID = bs_booktype.id "
			" left join bs_pressinfo on bs_bookcatalog.pressid = bs_pressinfo.id where bs_wsalenote.amount < 0 and  bs_wsalenoteheader.vendorid in (select id from dbo.getchild(" + IntToStr(ClientID) + "))" + sqlwhere +
			" ) C ON (D.typeid = C.typeid AND D.ID = C.ID) left JOIN "
			" (select bs_wsalenote.*,bs_wsalenoteheader.vendorid,bs_booktype.id as typeid,bs_pressinfo.id as pressid,bs_bookcatalog.id as bkcatalogid,(stk_bookinfo.Cbprice)*(bs_wsalenote.amount) as Cbprice,bs_wsalenote.DiscountedPrice-(stk_bookinfo.Cbprice)*(bs_wsalenote.amount) as profite "
			" from bs_wsalenote "
			" left join bs_wsalenoteheader on bs_wsalenoteheader.id = bs_wsalenote.WsaleNtHeaderID "
			" left join stk_bookinfo on bs_wsalenote.bkinfoid = stk_bookinfo.id "
			" left join bs_bookcatalog on stk_bookinfo.bkcatalogid = bs_bookcatalog.id "
			" left join bs_booktype on bs_bookcatalog.smallBookTypeID = bs_booktype.id "
			" left join bs_pressinfo on bs_bookcatalog.pressid = bs_pressinfo.id where bs_wsalenote.amount > 0 and bs_wsalenoteheader.vendorid in (select id from dbo.getchild(" + IntToStr(ClientID) + "))" + sqlwhere +
			" ) B ON (B.typeid = D.typeid AND D.ID = B.ID)"
			" group by A.id,A.name,D.vendorid having (sum(B.Amount) is not null or sum(C.Amount) IS NOT NULL or sum(D.Amount) IS NOT NULL )";
			dg->Columns->Items[1]->Title->Caption = "类别";
		break;
    default:
		;
	}
	query->Close();
	query->SQL->Clear();
	query->SQL->Add(sql);
	try {
		query->Open();
	} catch (Exception &E) {
		//ShowMessage(E.Message);
	}
}
//---------------------------------------------------------------------------

void __fastcall TfrmClearingClient::dgTitleClick(TColumnEh *Column)
{
	if (query->IsEmpty() ) {
    	return;
	}
	AnsiString qusort;
	qusort =  Column->FieldName + " ASC";
	if (query->Sort == "") {
		query->Sort =  Column->FieldName + " ASC";
	}
	else if (query->Sort == qusort) {
		query->Sort =  Column->FieldName + " DESC";
	}
	else
	{
		query->Sort =  Column->FieldName + " ASC";
	}
}
//---------------------------------------------------------------------------

void __fastcall TfrmClearingClient::spselectClientClick(TObject *Sender)
{
	TfrmselectClient * frm = new TfrmselectClient(Application,fcon,"");
	if (mrOk == frm->ShowModal())
	{
		ClientID = frm->GetSelectID();
		ClientView();
	}
	delete frm;
}
//---------------------------------------------------------------------------
void TfrmClearingClient::ClientView()
{
	if (ClientID == -1) {
		return;
	}
	String sql;
	TADOQuery * aq = new TADOQuery(NULL);
	aq->Connection = fcon;
	sql = "exec USP_BS_Client_View 0," + IntToStr(ClientID)  ;
	aq->Close();
	aq->SQL->Clear();
	aq->SQL->Add(sql);
	aq->Open();
	edtclient->Text = aq->FieldByName("Name")->AsAnsiString ;
	delete aq;
}
//---------------------------------------------------------------------------

void __fastcall TfrmClearingClient::edclientKeyPress(TObject *Sender, wchar_t &Key)

{
	if (Key == '\r') {
		TfrmselectClient * frm = new TfrmselectClient(Application,fcon,edclient->Text);
		if (mrOk == frm->ShowModal())
		{
			ClientID = frm->GetSelectID();
			ClientView();
		}
		delete frm;
	}
}
//---------------------------------------------------------------------------

void __fastcall TfrmClearingClient::dtp1Change(TObject *Sender)
{
	cbstart->Checked = true;
}
//---------------------------------------------------------------------------

void __fastcall TfrmClearingClient::dtp2Change(TObject *Sender)
{
	cbend->Checked = true;
}
//---------------------------------------------------------------------------

void __fastcall TfrmClearingClient::cpressChange(TObject *Sender)
{
	if (cpress->Text != "") {
        chpress->Checked = true;
	}
	else
	{
    	chpress->Checked = false;
	}
}
//---------------------------------------------------------------------------

void __fastcall TfrmClearingClient::edisbnChange(TObject *Sender)
{
	if (edisbn->Text != "") {
		chisbn->Checked = true;
	}
	else
	{
		chisbn->Checked = false;
	}
}
//---------------------------------------------------------------------------

void __fastcall TfrmClearingClient::cbtypeChange(TObject *Sender)
{
	if (cbtype->Text != "") {
		chtype->Checked = true;
	}
	else
	{
    	chtype->Checked = false;
	}
}
//---------------------------------------------------------------------------

void __fastcall TfrmClearingClient::ednameChange(TObject *Sender)
{
	if (edname->Text != "") {
		chname->Checked = true;
	}
	else
	{
    	chname->Checked = false;
	}
}
bool TfrmClearingClient::DbgridToExcel(TDBGridEh* dbg)
{
  	if (dbg->DataSource ->DataSet->IsEmpty() ) {
        return false;
	}
	AnsiString temptext,path;

	savedlg->FileName = this->Caption;
	if (savedlg->Execute())
	{
		String DBPath,Name;
		DBPath = ExtractFilePath(savedlg->FileName .c_str()  );
		Name = ExtractFileName(savedlg->FileName .c_str() );
		DBPath = DBPath + Name + ".csv";
		path =  DBPath;
	}
	else
	{
		return false;
	}
	int  iFileHandle;
	int  iFileLength;
	if(FileExists(path))
	   if (DeleteFileA(path))
			iFileHandle = FileCreate(path.c_str());
	   else
			return false;
	else
		iFileHandle = FileCreate(path.c_str());

	for(int q=0;q<dbg->FieldCount ;++q)
	{
		if (dbg->Columns->Items[q]->Visible == true) {
			temptext = temptext + dbg->Columns ->Items [q]->Title ->Caption + ",";
		}
	}
	iFileLength   =   FileSeek(iFileHandle,0,2);
	FileWrite(iFileHandle,temptext.c_str() ,temptext.Length());

	dbg->DataSource ->DataSet->DisableControls();
	dbg->DataSource ->DataSet ->First();
	while(!dbg->DataSource ->DataSet->Eof)
	{
		temptext = "\n";
		for(int j=1;j<dbg->Columns ->Count+1  ;j++)
		{
			if (dbg->Columns->Items[j-1]->Visible == true) {
				if (dbg->Columns ->Items [j-1]->FieldName == "ISBN") {
					if (dbg->DataSource ->DataSet ->FieldByName(dbg->Columns ->Items [j-1]->FieldName )->AsAnsiString != "") {
						temptext = temptext + "'" + dbg->DataSource ->DataSet ->FieldByName(dbg->Columns ->Items [j-1]->FieldName )->AsAnsiString + ",";
					}
					else
					{
                    	temptext = temptext + dbg->DataSource ->DataSet ->FieldByName(dbg->Columns ->Items [j-1]->FieldName )->AsAnsiString + ",";
					}
				}
				else if (dbg->Columns ->Items [j-1]->FieldName == "BookName") {
					AnsiString bookname;
					int len;
					bookname = dbg->DataSource ->DataSet ->FieldByName(dbg->Columns ->Items [j-1]->FieldName )->AsAnsiString;
					bookname = StringReplace(bookname , ",",".",TReplaceFlags()<<rfReplaceAll);
					temptext = temptext + bookname + ",";
				}
				else
				{
					temptext = temptext + dbg->DataSource ->DataSet ->FieldByName(dbg->Columns ->Items [j-1]->FieldName )->AsAnsiString + ",";
				}
			}
		}
		iFileLength   =   FileSeek(iFileHandle,0,2);
		FileWrite(iFileHandle,temptext.c_str() ,temptext.Length());
		dbg->DataSource ->DataSet ->Next() ;
	}
	dbg->DataSource ->DataSet->EnableControls();

	temptext = "\n";
        AnsiString text;
	for(int q=0;q<dbg->FieldCount ;++q)
	{
		if (dbg->Columns->Items[q]->Visible == true) {
			text = dbg->GetFooterValue(q,dbg->Columns->Items [q]);
			text = StringReplace(text , ",","",TReplaceFlags()<<rfReplaceAll);
			text = StringReplace(text , "-","'-",TReplaceFlags()<<rfReplaceAll);
			temptext = temptext + text + ",";
		}
	}
	FileWrite(iFileHandle,temptext.c_str() ,temptext.Length());

	FileClose(iFileHandle);

	MessageBox(0,"导出完毕！","提示" ,MB_OK);
	return false;















}
//---------------------------------------------------------------------------

void __fastcall TfrmClearingClient::BtnExportClick(TObject *Sender)
{
	if (query->IsEmpty() ) {
		return;
	}
	DbgridToExcel(dg);
}
//---------------------------------------------------------------------------

